---
import NavLink from "@/components/nav/NavLink.astro";

import type { MarkdownOrAstroPage } from "@/types/Page";
import type { NavElement } from "@/types/Navigation";
import { isCollectionEmpty } from "@/content.config";
import type { CollectionName } from "@/types/Collection";

const pagesCanBeAddedInNavigationMenu = Object.values(
  import.meta.glob("../../pages/**/index.{astro,md}", {
    eager: true,
  }),
) as MarkdownOrAstroPage[];

const navItemWithTitleOnlyFilter = (item: MarkdownOrAstroPage) =>
  Boolean(item.title || item.frontmatter?.title);

const navItemWithoutEmptyCollectionFilter = async (
  item: MarkdownOrAstroPage,
) => {
  return item.collection
    ? !(await isCollectionEmpty(item.collection as CollectionName))
    : true;
};

const mapToNavItem = (item: MarkdownOrAstroPage): NavElement => ({
  url: item.url || "/",
  title: item.title || item.frontmatter?.title || "Error?",
});

const sortItem = (a: NavElement, b: NavElement): number => {
  const isHome = (item: NavElement) => item.url === "/";
  const isAbout = (item: NavElement) => item.url === "/about";

  if (isHome(a)) return -1;
  if (isHome(b)) return 1;
  if (isAbout(a)) return 1;
  if (isAbout(b)) return -1;

  return a.title.localeCompare(b.title);
};

const asyncFilterForCollectionPage = async (pages: MarkdownOrAstroPage[]) => {
  const simplePageOrPageWithNotEmptyCollection: MarkdownOrAstroPage[] = [];
  for (const item of pages) {
    if (await navItemWithoutEmptyCollectionFilter(item)) {
      simplePageOrPageWithNotEmptyCollection.push(item);
    }
  }
  return simplePageOrPageWithNotEmptyCollection;
};

const navItems = (
  await asyncFilterForCollectionPage(pagesCanBeAddedInNavigationMenu)
)
  .filter(navItemWithTitleOnlyFilter)
  .map(mapToNavItem)
  .sort(sortItem);
---

<nav>
  <ul>
    {navItems.map((item) => <NavLink item={item} />)}
  </ul>
</nav>
<hr />
