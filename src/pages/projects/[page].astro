---
import { getCollection } from "astro:content";
import type { Page, PaginateFunction } from "astro";
import type { Project } from "../../components/card/types";
import type { CollectionName } from "../../content.config";
import { isCollectionEmpty } from "../../content.config";
import Layout from "../../layouts/Layout.astro";
import Card from "../../components/card/Card.astro";
import Pagination from "../../components/pagination/Pagination.astro";

interface Props {
  page: Page<Project>;
}

const collectionUsed: CollectionName = "projects";
const isEmpty = await isCollectionEmpty(collectionUsed);
if (isEmpty) {
  console.warn(`${collectionUsed} collection is empty`);
  return Astro.rewrite("/404");
}

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction;
}) {
  const sortByArchivedProject = (projectA: Project, projectB: Project) =>
    projectA.archived === projectB.archived ? 0 : projectA.archived ? 1 : -1;

  const sortByTitle = (projectA: Project, projectB: Project) => {
    const titleA = projectA.title.toLowerCase();
    const titleB = projectB.title.toLowerCase();
    if (titleA > titleB) return 1;
    if (titleA < titleB) return -1;
    return 0;
  };

  const projects = (await getCollection("projects"))
    .map(
      (project) =>
        ({
          url: `/projects/${project.id}`,
          title: project.data.title,
          description: project.data.description,
          archived: project.data.archived,
        }) as Project,
    )
    .sort(sortByTitle)
    .sort(sortByArchivedProject);

  return paginate(projects, { pageSize: 2 });
}

const title = "Projects";
const description = "Projects";
const { page } = Astro.props;
---

<Layout title={title} description={description}>
  <h1>Projects</h1>
  {
    page.data.map((project) => (
      <Card
        url={project.url}
        title={project.title}
        description={project.description}
        archived={project.archived}
      />
    ))
  }
  <Pagination page={page} />
</Layout>
